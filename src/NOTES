PAGE OBJECT MODEL
--------------------------------------------------
fremawork'te pages, tests, utilities bulunmalıdır.
Driver class; web sayfalarıyla iletişim kurmamızı sağlar.
Driver'ı esnek kullanabilmek için static yapıyoruz.
(static yapmasaydık ya her classta object oluşturacaktık yada inheritance ile çağıracaktık.)
Public olarak tanımlanan öğeye kod bloğunun içinden ve dışından erişebilir, yani her yerden ulaşılabilir denilebilir.
Static tanımlaması yapıldığında ise bu sınıfa herhangi bir nesne oluşturmadan, sadece adıyla çağırıp erişim sağlanabilir.
--------------------------------------------------------------------------------------------------------------------------------

Page factory'i page sayfamda const.içinde kurduğumuz zaman, web elementleri driver ile  ilişkilendirmiş oluyoruz.
PageFactory bizlere nesne deposu oluşturmaya imkan veren, sürdürülebilir,
yeniden kullanılabilir ve elementleri tek bir yerden yönetmeyi sağlayan bir Page object model konseptidir.
Page Factory’i kullanımına bakacak olursak PageFactory model, Web elementlerini
@FindBy annotionu ile algılar. How kalıbı ile birlikte elementlerin ayırt edici
locator’ından hangisini kullanacaksak belirtilir. Sonrasında ise o ayırt edici
locator’ın adı tanımlanır. Public WebElement ile birlikte test senaryolarında
kullanmak üzere isimlendirmesi yaparız. Burada isimlendirme daha sonra baktığında
anlayabilmek için önemlidir, okunaklı olmalıdır.
--------------------------------------------------------------------------------------------------------------------------------
-Frameworkler buyudukce yeni classlar yeni test methodlari yeni webelementler olusturdukca
icinden cikilmaz, anlasilmaz, tekrar bakimi yapilamaz, guncellemesi cok zor hatta imkansiz bir hal alir.
-Uzmanlar reusable, maintainable, rahat manipule edilebilir bir framework icin bir design pattern olarak
POM (page object model)'de karar vermisler.
-Olmazsa olmazlar
        1) Driver class
        2) Page class
        3) Test class
           Utilities
-Aradigimiz bir web elementi ya da bir methodu kolaylikla bulabilmek ve guncelleyebilmek icin javadan
ogrenmis oldugumuz OOP Concept Selenium ile page object modelde birlestirilmis oluyor.

--------------------------------------------------------------------------------------------------------------------------------
Keşif Testi (Exploratory Testing) , test senaryolarının önceden oluşturulmadığı,
testçilerin sistemi test anında kontrol ettiği bir tür yazılım testidir.
Herhangi bir test senaryosuna bağlı kalmaksızın yazılımları serbestçe keşfederek buldukları bug’ları raporlamasına dayanır.
Test uzmanlarının minimum planlama ve maksimum test uygulamasına katıldığı uygulamalı bir yaklaşımdır.
Testin yürütülmesinden önce neyin test edileceğine dair fikirleri not edebilirler.
Keşif Testi (Exploratory Testing), diğer test yaklaşımlarında kolayca kapsanmayan hataları ve eksiklikleri keşfetmeye,
ortaya çıkarmaya dayanır. Özellikle yazılım test döngüsünün başlarında sıkça başvurulan bir test türüdür.
Test uzmanı açısından ise istediği şekilde son kullanıcı senaryoları oluşturma imkanı olduğu için eğlencelidir.

--------------------------------------------------------------------------------------------------------------------------------
webElementlerin locate'inde public yapmamızın sebebi diğer package'lardan da ulaşabilmektir.